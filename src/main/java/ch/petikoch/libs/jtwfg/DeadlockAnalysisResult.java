/**
 * Copyright 2014-2021 Peti Koch und Adrian Elsener
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package ch.petikoch.libs.jtwfg;

import ch.petikoch.libs.jtwfg.assertion.Preconditions;

import java.util.Collections;
import java.util.Set;

/**
 * The representation for the result of a deadlock analysis in a "task wait for model" graph.
 * <p>
 * Immutable / thread-safe.
 *
 * @param <T> The type of the ID of the tasks. Something with a meaningful {@link Object#equals(Object)} and {@link
 *            Object#hashCode()} implementation like {@link String}, {@link Long} or a class of your domain model which is fine
 *            to use as a key e.g. in a {@link java.util.HashMap}. If T implements Comparable, then you get sorted collections.
 */
public class DeadlockAnalysisResult<T> {

    private final boolean hasDeadlock;
    private final Set<DeadlockCycle<T>> deadlockCycles;

    DeadlockAnalysisResult(final Set<DeadlockCycle<T>> deadlockCycles) {
        this.deadlockCycles = Collections.unmodifiableSet(deadlockCycles);
        hasDeadlock = !this.deadlockCycles.isEmpty();
    }

    /**
     * @return true, if you have one or more deadlocks
     */
    public boolean hasDeadlock() {
        return hasDeadlock;
    }

    /**
     * @return all found the {@link DeadlockCycle}'s (zero or more...)
     */
    public Set<DeadlockCycle<T>> getDeadlockCycles() {
        return deadlockCycles;
    }

    /**
     * @param task not null
     * @return true if the given task is somehow deadlocked
     */
    public boolean isDeadlocked(T task) {
        Preconditions.checkArgumentNotNull(task, "task may not be null");
        for (DeadlockCycle<T> deadlockCycle : deadlockCycles) {
            if (deadlockCycle.isDeadlocked(task)) {
                return true;
            }
        }
        return false;
    }

    // generated by IntelliJ IDEA
    @SuppressWarnings("RedundantIfStatement")
    @Override
    public boolean equals(final Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        final DeadlockAnalysisResult that = (DeadlockAnalysisResult) o;

        if (hasDeadlock != that.hasDeadlock) return false;
        if (!deadlockCycles.equals(that.deadlockCycles)) return false;

        return true;
    }

    // generated by IntelliJ IDEA
    @Override
    public int hashCode() {
        int result = (hasDeadlock ? 1 : 0);
        result = 31 * result + deadlockCycles.hashCode();
        return result;
    }

    // generated by IntelliJ IDEA
    @Override
    public String toString() {
        String result = DeadlockAnalysisResult.class.getSimpleName();
        result += ":";
        result += "\n\n";
        result += "hasDeadlock=" + hasDeadlock();
        if (!deadlockCycles.isEmpty()) {
            result += "\n\n";
            result += "Cycles:";
            result += "\n";
            for (DeadlockCycle<T> deadlockCycle : deadlockCycles) {
                result += "- ";
                result += deadlockCycle;
                result += "\n";
            }
        }
        return result.trim();
    }
}
