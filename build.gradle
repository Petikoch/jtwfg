plugins {
    id 'nu.studer.credentials' version '2.1'      // https://github.com/etiennestuder/gradle-credentials-plugin
    id 'com.github.hierynomus.license' version '0.15.0'  // https://github.com/hierynomus/license-gradle-plugin
    id "com.github.ben-manes.versions" version "0.38.0"
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'signing'

group = "ch.petikoch.libs"
archivesBaseName = "jtwfg"
version = '2.0.0'

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext["fileEncoding"] = 'UTF-8'
ext["signing.keyId"] = credentials.gpgKeyId
ext["signing.password"] = credentials.gpgKeyPassword
ext["signing.secretKeyRingFile"] = credentials.gpgKeyFile
ext["ossrhUsername"] = credentials.ossrhUsername
ext["ossrhPassword"] = credentials.ossrhPassword

repositories {
    mavenCentral()
}

dependencies {
    testCompile 'org.codehaus.groovy:groovy-all:2.5.14'
    testCompile('org.spockframework:spock-core:1.3-groovy-2.5') {
        exclude group: 'org.codehaus.groovy'
    }
    testCompile 'com.google.guava:guava:30.1.1-jre' // provides e.g. nice Multimap
}

jar {
    manifest {
        attributes 'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Built-By': System.getProperty('user.name'),
                'Built-Date': new Date(),
                'Built-JDK': System.getProperty('java.version'),
                'Built-Gradle': gradle.gradleVersion
    }
}

test {
    systemProperty 'file.encoding', project.fileEncoding
}

sourceSets.main.java.srcDirs = ['src/main/java']
sourceSets.test.java.srcDirs = []
sourceSets.main.groovy.srcDirs = []
sourceSets.test.groovy.srcDirs = ['src/test/groovy']

task javadocJar(type: Jar, dependsOn: classes) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    sign configurations.archives
}

tasks.withType(GroovyCompile) {
    groovyOptions.encoding = project.fileEncoding
    options.encoding = project.fileEncoding
}

tasks.withType(JavaCompile) {
    options.encoding = project.fileEncoding
}

// http://forums.gradle.org/gradle/topics/set_maxparallelforks_to_number_of_cores_on_the_current_machine
tasks.withType(Test) {
    maxParallelForks = Runtime.getRuntime().availableProcessors()
}

license {
    header = rootProject.file('config/HEADER')
    strictCheck = true
}

// https://central.sonatype.org/pages/gradle.html
uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://s01.oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name project.archivesBaseName
                packaging 'jar'
                description 'A small java 8+ standalone library using a task wait for graph model to detect deadlocks'
                url 'https://github.com/Petikoch/jtwfg'

                scm {
                    connection = 'https://github.com/Petikoch/jtwfg.git'
                    developerConnection = 'https://github.com/Petikoch/jtwfg.git'
                    url = 'https://github.com/Petikoch/jtwfg'
                }

                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'petikoch'
                        name 'Peti Koch'
                        email 'petikoch@gmail.com'
                    }
                    developer {
                        name 'Adrian Elsener'
                    }
                }
            }
        }
    }
}